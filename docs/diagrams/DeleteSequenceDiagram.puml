@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":DeleteCommandParser" as DeleteCommandParser LOGIC_COLOR
participant "d:DeleteCommand" as DeleteCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
participant ":ParserUtil" as ParserUtil LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("delete ARG")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("delete ARG")
activate AddressBookParser

create DeleteCommandParser
AddressBookParser -> DeleteCommandParser
activate DeleteCommandParser

DeleteCommandParser --> AddressBookParser
deactivate DeleteCommandParser

AddressBookParser -> DeleteCommandParser : parse("ARG")
activate DeleteCommandParser

alt Input ARG is Index (e.g., "1")
    DeleteCommandParser -> ParserUtil : parseIndex("1")
    activate ParserUtil
    ParserUtil --> DeleteCommandParser : index
    deactivate ParserUtil
    create DeleteCommand
    DeleteCommandParser -> DeleteCommand : new DeleteCommand(index)
    activate DeleteCommand
    DeleteCommand --> DeleteCommandParser : d (with index)
    deactivate DeleteCommand

else Input ARG is Name (e.g., "Alex Yeoh")
    DeleteCommandParser -> ParserUtil : parseIndex("Alex Yeoh")
    activate ParserUtil
    ParserUtil --> DeleteCommandParser : throws ParseException
    deactivate ParserUtil
    DeleteCommandParser -> ParserUtil : parseName("Alex Yeoh")
    activate ParserUtil
    ParserUtil --> DeleteCommandParser : name
    deactivate ParserUtil
    create DeleteCommand
    DeleteCommandParser -> DeleteCommand : new DeleteCommand(name)
    activate DeleteCommand
    DeleteCommand --> DeleteCommandParser : d (with name)
    deactivate DeleteCommand
end

DeleteCommandParser --> AddressBookParser : d
deactivate DeleteCommandParser
DeleteCommandParser -[hidden]-> AddressBookParser
destroy DeleteCommandParser

AddressBookParser --> LogicManager : d
deactivate AddressBookParser

LogicManager -> DeleteCommand : execute(m)
activate DeleteCommand

alt Command 'd' contains an index
    DeleteCommand -> Model : getFilteredPersonList()
    activate Model
    Model --> DeleteCommand : lastShownList
    deactivate Model
    DeleteCommand -> Model : deletePerson(personAtIndex)
    activate Model
    Model --> DeleteCommand
    deactivate Model

else Command 'd' contains a name
    DeleteCommand -> Model : getFilteredPersonList()
    activate Model
    Model --> DeleteCommand : lastShownList
    deactivate Model
    alt Person with name found
        DeleteCommand -> Model : deletePerson(personWithName)
        activate Model
        Model --> DeleteCommand
        deactivate Model
    else Person with name not found
        DeleteCommand --> LogicManager : throws CommandException
        deactivate DeleteCommand
        [<-- LogicManager : CommandException
        deactivate LogicManager
        ' REMOVED 'return' line here
    end
end

create CommandResult
DeleteCommand -> CommandResult
activate CommandResult

CommandResult --> DeleteCommand
deactivate CommandResult

DeleteCommand --> LogicManager : r
deactivate DeleteCommand

[<--LogicManager
deactivate LogicManager
@enduml
